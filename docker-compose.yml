services:
  # Web 服务
  web:
    image: web:latest
    build:
      context: . # 使用当前目录下的 Dockerfile
      dockerfile: Dockerfile # 指定 Dockerfile 路径
    container_name: web # 自定义容器名称
    volumes:
      - .:/news-summary:z # 确保和 Dockerfile 里的 WORKDIR 一致
      - venv_data:/news-summary/.venv # 避免覆盖 .venv, 开发环境必须要设置
    ports:
      - "8000:8000" # 暴露 FastAPI 端口
    env_file:
      - .env.docker
      - .env # 加载环境变量
    depends_on:
      - db
      - redis
    networks:
      - otel-net
    command: ["sh", "./scripts/start-web.sh"]

  celery-worker:
    image: celery-worker:latest
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery-worker
    command: ["sh", "./scripts/start-celery-worker.sh"]
    volumes:
      - .:/news-summary:z
      - venv_data:/news-summary/.venv
    env_file:
      - .env.docker
      - .env
    depends_on:
      - db
      - redis
    networks:
      - otel-net

  celery-beat:
    image: celery-beat:latest
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery-beat
    command: ["sh", "./scripts/start-celery-beat.sh"]
    volumes:
      - .:/news-summary:z
      - venv_data:/news-summary/.venv
    env_file:
      - .env.docker
      - .env
    depends_on:
      - db
      - redis
    networks:
      - otel-net

  # 数据库服务
  db:
    image: postgres:16
    container_name: pg
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: newsdb
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    ports:
      - "127.0.0.1:5432:5432" # 本地 web 连接, SSH 隧道访问 PostgreSQL
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d newsdb"]
      interval: 2s
      timeout: 2s
      retries: 3
    networks:
      - otel-net

  test-db:
    image: postgres:16
    container_name: test-db
    environment:
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_DB: test_newsdb
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    ports:
      - "5433:5432" # 将宿主机的 5433 端口映射到容器的 5432 端口
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d test_newsdb"]
      interval: 2s
      timeout: 2s
      retries: 3
    networks:
      - otel-net

  # Redis 服务
  redis:
    image: redis:6.2
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server
    volumes:
      - redis_data:/data
    networks:
      - otel-net

  # Grafana 服务
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    depends_on:
      - otel-collector
      - prometheus
      - tempo
      - loki
    networks:
      - otel-net

  # otel 服务
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    command: ["--config=/etc/otel/otel.yaml"]
    volumes:
      - ./config/otel/otel.yaml:/etc/otel/otel.yaml
    ports:
      - "4317:4317" # gRPC OTLP
      - "9464:9464" # Prometheus Metrics
    networks:
      - otel-net

  # Tempo 服务
  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./config/tempo/tempo.yaml:/etc/tempo.yaml
      - tempo_data:/tmp/tempo
    ports:
      - "3200:3200" # Tempo HTTP API
    networks:
      - otel-net

  # Prometheus 服务
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml
    command:
      - "--config.file=/etc/prometheus/prometheus.yaml"
    networks:
      - otel-net

  loki:
    image: grafana/loki:2.9.2
    container_name: loki
    volumes:
      # 这里注释掉，用默认的配置
      # - ./config/loki/loki.yaml:/etc/loki/config.yaml
      - loki_data:/tmp/loki
    ports:
      - "3100:3100"
    networks:
      - otel-net

  nginx:
    image: nginx:latest
    container_name: nginx-ssl
    ports:
      - "80:80"
      - "443:443"
    env_file:
      - .env.docker
      - .env # 加载环境变量
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ${REMOTE_FRONT_ROOT}/dist:/usr/share/nginx/html:ro
      - ./data/certbot/conf:/etc/letsencrypt:ro
      - ./data/certbot/www:/var/www/certbot:ro
    depends_on:
      - web
    restart: always
    networks:
      - otel-net

# 定义卷
volumes:
  venv_data:
  postgres_test_data:
  grafana_data:
  tempo_data:
  loki_data:
  redis_data:

# 定义网络
networks:
  otel-net:
    driver: bridge
